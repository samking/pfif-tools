#!/usr/bin/env python
# Copyright 2011 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Displays the difference between two PFIF XML files.

* Differences in field order are ignored regardless of PFIF version.
* Notes that are children of persons automatically have the person_record_id
  added to them, so children of persons and top-level notes are considered the
  same.
* This tool assumes that both files are valid PFIF XML.  That means that this
  tool is not guaranteed to notice if, for instance, one file has a child of the
  root that is neither a person nor a note and the other child is missing that
  or if there are two notes with the same note_record_id.
* The output will include one message per person or note that is missing or
  added.  These messages will specify whether it is a person or note and whether
  it was missing or added in addition to the id of the note.  The output will
  also include one message per person or note field that is missing, added, or
  changed.  For each of these, it will display the id of the containing person
  or note, the field name, whether the field was missing, added, or changed, the
  current text (if present), and the expected text (if present)."""

__author__ = 'samking@google.com (Sam King)'

import utils
import sys
import optparse

# TODO(samking): Add --ignore-field flag.  Add --blank-is-nonexistent flag.
# TODO(samking): Add --case-insensitive-text flag.
# TODO(samking): Add line numbers and xml lines.

# To allow person_record_ids and note_record_ids (which could be the same) to
# reside in the same map, we need to make them unique.
PERSON_PREFIX = 'p'
NOTE_PREFIX = 'n'

def record_id_to_key(record_id, is_person):
  """Call this method on a record_id to turn the record id into a key for the
  object generated by objectify_pfif_xml.  This must be done to allow both
  notes and persons to reside in the same map."""
  if is_person:
    return PERSON_PREFIX + record_id
  else:
    return NOTE_PREFIX + record_id

def is_key_person(key):
  """Returns True if the key corresponds to a person or False if the key
  corresponds to a note."""
  return key.startswith(PERSON_PREFIX)

def key_to_record_id(key):
  """Undoes record_id_to_key."""
  # This function will need to change if the prefixes are more than 1 character
  assert len(PERSON_PREFIX) == 1 and len(NOTE_PREFIX) == 1
  return key[1:]

def change_record_ids(reference_map):
  """Call this method on a map to transform all keys as per record_id_to_key.
  This can change a reference map into a map suitable for comparison with a map
  generated by objectify_pfif_xml."""
  transformed_object = {}
  for record_id, record_map in reference_map.items():
    is_person = 'person' in record_id
    transformed_key = record_id_to_key(record_id, is_person)
    transformed_object[transformed_key] = record_map
  return transformed_object


def objectify_parents(parents, is_person, object_map, tree,
                      parent_person_record_id=None):
  """Adds the object representation of each parent in parents to object_map.
  If is_person, all parents are assumed to be persons (else, notes).  Tree is
  a PfifXmlTree.  Specifying parent_person_record_id is used for recursive
  calls when a person has a note as a child."""
  if is_person:
    record_id_tag = 'person_record_id'
  else:
    record_id_tag = 'note_record_id'
  for parent in parents:
    record_id = tree.get_field_text(parent, record_id_tag)
    if record_id is None:
      # TODO(samking): better handling of this error?
      print 'Invalid PFIF XML: a record is missing its ' + record_id_tag
    else:
      record_map = object_map.setdefault(
          record_id_to_key(record_id, is_person), {})
      # If this note is a child of a person, it isn't required to have a
      # person_record_id, but it's easier to deal with notes that have
      # person_record_ids, so we force-add it.
      if not is_person and parent_person_record_id is not None:
        record_map['person_record_id'] = parent_person_record_id
      for child in parent.getchildren():
        field_name = utils.extract_tag(child.tag)
        # We'll deal with all notes together, so skip them for now.
        if is_person and field_name == 'note':
          continue
        else:
          # if there is no text in the node, use the empty string, not None
          field_value = child.text or ''
          record_map[field_name] = field_value
      if is_person:
        sub_notes = parent.findall(tree.add_namespace_to_tag('note'))
        objectify_parents(sub_notes, False, object_map, tree,
                          parent_person_record_id=record_id)

def objectify_pfif_xml(file_to_objectify):
  """Turns a file of PFIF XML into a map."""
  # read the file into an XML tree
  tree = utils.PfifXmlTree(file_to_objectify)
  # turn the xml trees into a persons and notes map for each file.  They will
  # map from record_id to a map from field_name to value
  object_map = {}
  objectify_parents(tree.get_all_persons(), True, object_map, tree)
  objectify_parents(tree.get_top_level_notes(), False, object_map, tree)
  return object_map

def make_diff_message(message_text, record_id, xml_tag=None):
  """Returns a Message object with the provided information."""
  is_person = is_key_person(record_id)
  real_record_id = key_to_record_id(record_id)
  if is_person:
    return utils.Message(message_text, xml_tag=xml_tag,
                         person_record_id=real_record_id)
  else:
    return utils.Message(message_text, xml_tag=xml_tag,
                         note_record_id=real_record_id)

def pfif_obj_diff(records_a, records_b, text_is_case_sensitive):
  """Compares if records_a and records_b contain the same data.  Returns a
  list of messages containing one message for each of the following scenarios:
   * Deleted Records: records_a contains a record that is not in records_b,
   * Added Records: records_b contains a record that is not in records_a,
   * Deleted Fields: a record in records_a contains a field that is not in the
     corresponding record in records_b
   * Added Fields: a record in records_b contains a field that is not in the
     corresponding record in records_a
   * Changed Values: a field value in records_a is not the same as the
     corresponding field value in records_b"""
  messages = []
  for record, field_map_a in records_a.items():
    field_map_b = records_b.get(record)
    if field_map_b is None:
      messages.append(make_diff_message('Record Deleted.', record))
    else:
      for field, value_a in field_map_a.items():
        value_b = field_map_b.get(field)
        if value_b is None:
          messages.append(make_diff_message('Field Deleted.', record,
                                            xml_tag=field))
        else:
          if not text_is_case_sensitive:
            value_a = value_a.lower()
            value_b = value_b.lower()
          if value_a != value_b:
            message_text = ('Value Changed: "' + value_a + '" is now "' +
                            value_b + '".')
            messages.append(make_diff_message(message_text, record,
                                              xml_tag=field))
      for field in field_map_b:
        if field not in field_map_a:
          messages.append(make_diff_message('Field Added.', record,
                                            xml_tag=field))
  for record in records_b:
    if record not in records_a:
      messages.append(make_diff_message('Record Added.', record))
  return messages

def pfif_file_diff(file_a, file_b, text_is_case_sensitive=True):
  """Compares file_a and file_b.  Returns a list of messages as per
  pfif_obj_diff."""
  records_a = objectify_pfif_xml(file_a)
  records_b = objectify_pfif_xml(file_b)
  return pfif_obj_diff(records_a, records_b, text_is_case_sensitive)

def main():
  """Prints a diff between two files."""
  parser = optparse.OptionParser(usage='usage: %prog file-a file-b [options]')
  parser.add_option('--text-is-case-insensitive', action='store_false',
                    dest='text_is_case_sensitive',  default=True,
                    help='<pfif:full_name>Jane</pfif:full_name> is the same as '
                    '<pfif:full_name>JANE</pfif:full_name>')
  (options, args) = parser.parse_args()

  messages = pfif_file_diff(utils.open_file(args[0]), utils.open_file(args[1]),
                            options.text_is_case_sensitive)
  print utils.MessagesOutput.messages_to_str(messages)

if __name__ == '__main__':
  main()
